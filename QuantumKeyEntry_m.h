//
// Generated file, do not edit! Created by nedtool 5.4 from QuantumKeyEntry.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __QUANTUMKEYENTRY_M_H
#define __QUANTUMKEYENTRY_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>QuantumKeyEntry.msg:2</tt> by nedtool.
 * <pre>
 * packet QuantumKeyEntry
 * {
 *     int identity;
 *     string macAddress;
 *     string key;
 *     string status;
 * }
 * </pre>
 */
class QuantumKeyEntry : public ::omnetpp::cPacket
{
  protected:
    int identity;
    ::omnetpp::opp_string macAddress;
    ::omnetpp::opp_string key;
    ::omnetpp::opp_string status;

  private:
    void copy(const QuantumKeyEntry& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const QuantumKeyEntry&);

  public:
    QuantumKeyEntry(const char *name=nullptr, short kind=0);
    QuantumKeyEntry(const QuantumKeyEntry& other);
    virtual ~QuantumKeyEntry();
    QuantumKeyEntry& operator=(const QuantumKeyEntry& other);
    virtual QuantumKeyEntry *dup() const override {return new QuantumKeyEntry(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getIdentity() const;
    virtual void setIdentity(int identity);
    virtual const char * getMacAddress() const;
    virtual void setMacAddress(const char * macAddress);
    virtual const char * getKey() const;
    virtual void setKey(const char * key);
    virtual const char * getStatus() const;
    virtual void setStatus(const char * status);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QuantumKeyEntry& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QuantumKeyEntry& obj) {obj.parsimUnpack(b);}


#endif // ifndef __QUANTUMKEYENTRY_M_H

