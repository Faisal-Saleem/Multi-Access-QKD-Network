<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="_switch_memory_8cc" kind="file" language="C++">
    <compoundname>SwitchMemory.cc</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">bitset</includes>
    <includes local="no">iostream</includes>
    <includes refid="_switch_memory_8h" local="yes">SwitchMemory.h</includes>
    <includes refid="_mac_table_entry__m_8h" local="yes">MacTableEntry_m.h</includes>
    <includes refid="_quantum_sub_interface_binding__m_8h" local="yes">QuantumSubInterfaceBinding_m.h</includes>
    <includes refid="_session_state_entry__m_8h" local="yes">SessionStateEntry_m.h</includes>
    <incdepgraph>
      <node id="1">
        <label>SwitchMemory.cc</label>
        <link refid="_switch_memory_8cc"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>SwitchMemory.h</label>
        <link refid="_switch_memory_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ArpTableEntry_m.h</label>
        <link refid="_arp_table_entry__m_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>SessionStateEntry_m.h</label>
        <link refid="_session_state_entry__m_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>QuantumSubInterfaceBinding_m.h</label>
        <link refid="_quantum_sub_interface_binding__m_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>bitset</label>
      </node>
      <node id="7">
        <label>ctime</label>
      </node>
      <node id="8">
        <label>MacTableEntry_m.h</label>
        <link refid="_mac_table_entry__m_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>omnetpp.h</label>
      </node>
      <node id="4">
        <label>iostream</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_switch_memory_8cc_1ad105d8c14b52fa0f729437a91b79ca9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Define_Module</definition>
        <argsstring>(SwitchMemory)</argsstring>
        <name>Define_Module</name>
        <param>
          <type><ref refid="class_switch_memory" kindref="compound">SwitchMemory</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SwitchMemory.cc" line="24" column="1" declfile="SwitchMemory.cc" declline="24" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public<sp/>License</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>along<sp/>with<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>http://www.gnu.org/licenses/.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bitset&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_switch_memory_8h" kindref="compound">SwitchMemory.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_mac_table_entry__m_8h" kindref="compound">MacTableEntry_m.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_quantum_sub_interface_binding__m_8h" kindref="compound">QuantumSubInterfaceBinding_m.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_session_state_entry__m_8h" kindref="compound">SessionStateEntry_m.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="_switch_memory_8cc_1ad105d8c14b52fa0f729437a91b79ca9c" kindref="member">Define_Module</ref>(<ref refid="class_switch_memory" kindref="compound">SwitchMemory</ref>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="class_switch_memory_1a5f742c0451f58a8af5cddc53970b0da1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1a5f742c0451f58a8af5cddc53970b0da1" kindref="member">SwitchMemory::initialize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stage)</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="class_switch_memory_1aee50570ebd59a3c55a4fbaa28da478b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1aee50570ebd59a3c55a4fbaa28da478b5" kindref="member">SwitchMemory::numInitStages</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="32"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>2;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="class_switch_memory_1a69f25a104169ab7b2ac4fa7aa61ba09f" refkind="member"><highlight class="normal"><ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/><ref refid="class_switch_memory_1a69f25a104169ab7b2ac4fa7aa61ba09f" kindref="member">SwitchMemory::getMacTable</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*macTableEntry<sp/>=<sp/>(<ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*)<sp/>this-&gt;macAddressTable[index];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*macTableEntry;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="class_switch_memory_1a359a3321ab7fdaf1c91d8949205bc3c0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1a359a3321ab7fdaf1c91d8949205bc3c0" kindref="member">SwitchMemory::addMacTableEntry</ref>(<ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*macTableEntry)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;macAddressTable.add(macTableEntry);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_switch_memory_1a09b86238d1a105909514259ca5d25713" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1a09b86238d1a105909514259ca5d25713" kindref="member">SwitchMemory::getMacTableSize</ref>()</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;macAddressTable.size();</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_switch_memory_1a9df543d53be88a36f95d97c38956c5a4" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_switch_memory_1a9df543d53be88a36f95d97c38956c5a4" kindref="member">SwitchMemory::getQuantumInterfaceMacAddressFromMacTable</ref>(std::string<sp/>publicInterfaceMacAddress)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SwitchMemory::searchMacAddressTableByMacAddress(publicInterfaceMacAddress,<sp/></highlight><highlight class="charliteral">&apos;Q&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="class_switch_memory_1a289b60483ade7b6290495c261081a96a" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_switch_memory_1a289b60483ade7b6290495c261081a96a" kindref="member">SwitchMemory::getInterfaceIdFromMacTable</ref>(std::string<sp/><ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9ecaba7ec5617dcd086ea11b2875db29fb6c" kindref="member">macAddress</ref>)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SwitchMemory::searchMacAddressTableByMacAddress(<ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9ecaba7ec5617dcd086ea11b2875db29fb6c" kindref="member">macAddress</ref>,<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="class_switch_memory_1a9fb1f2694ac9afd878028b479a70349c" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_switch_memory_1a9fb1f2694ac9afd878028b479a70349c" kindref="member">SwitchMemory::getMacAddressOfInterfaceFromMacTable</ref>(std::string<sp/><ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9eca7e91d3bb453d1a51a3cb4849a09a05b4" kindref="member">interface</ref>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SwitchMemory::searchMacAddressTableByInterface(<ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9eca7e91d3bb453d1a51a3cb4849a09a05b4" kindref="member">interface</ref>,<sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="class_switch_memory_1aefa84da5267c7ef53a69bcbacafcf930" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_switch_memory_1aefa84da5267c7ef53a69bcbacafcf930" kindref="member">SwitchMemory::getQuantumMacAddressOfInterfaceFromMacTable</ref>(std::string<sp/><ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9eca7e91d3bb453d1a51a3cb4849a09a05b4" kindref="member">interface</ref>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SwitchMemory::searchMacAddressTableByInterface(<ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9eca7e91d3bb453d1a51a3cb4849a09a05b4" kindref="member">interface</ref>,<sp/></highlight><highlight class="charliteral">&apos;Q&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="class_switch_memory_1ab02cb8b04de17b788e6d3886c85ec421" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_switch_memory_1ab02cb8b04de17b788e6d3886c85ec421" kindref="member">SwitchMemory::getQuantumInterfaceFromMacTable</ref>(std::string<sp/>qMacAddress)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SwitchMemory::searchMacAddressTableByQuantumMacAddress(qMacAddress,<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="class_switch_memory_1a8df01e95ba7586af1fa28a4c1844e178" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_switch_memory_1a8df01e95ba7586af1fa28a4c1844e178" kindref="member">SwitchMemory::getQuantumInterfaceFromMacTableByPublicMac</ref>(std::string<sp/><ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9ecaba7ec5617dcd086ea11b2875db29fb6c" kindref="member">macAddress</ref>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SwitchMemory::searchMacAddressTableByMacAddress(<ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9ecaba7ec5617dcd086ea11b2875db29fb6c" kindref="member">macAddress</ref>,<sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="class_switch_memory_1a951352f41fb30a905445e7e9ec0089a3" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_switch_memory_1a951352f41fb30a905445e7e9ec0089a3" kindref="member">SwitchMemory::getInterface</ref>(std::string<sp/><ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9ecaba7ec5617dcd086ea11b2875db29fb6c" kindref="member">macAddress</ref>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;=<sp/>macAddressTable.size();<sp/>i++)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*macTableEntry<sp/>=<sp/>(<ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*)<sp/>this-&gt;macAddressTable[i];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(macTableEntry-&gt;<ref refid="class_mac_table_entry_1aaa684cc0b7d88a4758740c26d1027935" kindref="member">getMacAddress</ref>(),<sp/><ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9ecaba7ec5617dcd086ea11b2875db29fb6c" kindref="member">macAddress</ref>.c_str())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>macTableEntry-&gt;<ref refid="class_mac_table_entry_1af25bc86738003fb75bb3e4d0e74cda88" kindref="member">getInterface</ref>();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="class_switch_memory_1aee8f80a0b479456debaa707155bca257" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1aee8f80a0b479456debaa707155bca257" kindref="member">SwitchMemory::entryExist</ref>(std::string<sp/>srcMac,<sp/>std::string<sp/>desMac)</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;sessionStateTable.size();<sp/>i++)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_session_state_entry" kindref="compound">SessionStateEntry</ref><sp/>*session<sp/>=<sp/>(<ref refid="class_session_state_entry" kindref="compound">SessionStateEntry</ref><sp/>*)<sp/>this-&gt;sessionStateTable[i];</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(session-&gt;<ref refid="class_session_state_entry_1a0a95e11ae98c1e210baf2bb2dfafaeb3" kindref="member">getSrcMac</ref>(),srcMac.c_str())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(session-&gt;<ref refid="class_session_state_entry_1a0a95e11ae98c1e210baf2bb2dfafaeb3" kindref="member">getSrcMac</ref>(),desMac.c_str())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(session-&gt;<ref refid="class_session_state_entry_1aa26d3a0d89a0a480a065700541c7f348" kindref="member">getDesMac</ref>(),srcMac.c_str())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(session-&gt;<ref refid="class_session_state_entry_1aa26d3a0d89a0a480a065700541c7f348" kindref="member">getDesMac</ref>(),desMac.c_str())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">std::string<sp/>SwitchMemory::searchMacAddressTableByMacAddress(std::string<sp/><ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9ecaba7ec5617dcd086ea11b2875db29fb6c" kindref="member">macAddress</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>query)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>queryResult<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;macAddressTable.size();<sp/>i++)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*macTableEntry<sp/>=<sp/>(<ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*)<sp/>this-&gt;macAddressTable[i];</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(macTableEntry-&gt;<ref refid="class_mac_table_entry_1aaa684cc0b7d88a4758740c26d1027935" kindref="member">getMacAddress</ref>(),<sp/><ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9ecaba7ec5617dcd086ea11b2875db29fb6c" kindref="member">macAddress</ref>.c_str())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(query)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;Q&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queryResult<sp/>=<sp/>macTableEntry-&gt;<ref refid="class_mac_table_entry_1a8a2d0356c6109782bdf7b446fa4f6c1c" kindref="member">getQuantumMacAddress</ref>();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queryResult<sp/>=<sp/>macTableEntry-&gt;<ref refid="class_mac_table_entry_1af25bc86738003fb75bb3e4d0e74cda88" kindref="member">getInterface</ref>();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;X&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queryResult<sp/>=<sp/>macTableEntry-&gt;<ref refid="class_mac_table_entry_1a506d91d4588ee6858a1df8abba79e435" kindref="member">getQuantumInterfaceId</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>queryResult;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">std::string<sp/>SwitchMemory::searchMacAddressTableByInterface(std::string<sp/><ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9eca7e91d3bb453d1a51a3cb4849a09a05b4" kindref="member">interface</ref>,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>query)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>queryResult<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;macAddressTable.size();<sp/>i++)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*macTableEntry<sp/>=<sp/>(<ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*)<sp/>this-&gt;macAddressTable[i];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(macTableEntry-&gt;<ref refid="class_mac_table_entry_1af25bc86738003fb75bb3e4d0e74cda88" kindref="member">getInterface</ref>(),<sp/><ref refid="_switch_memory_8h_1abfbb64a2ec7afa6cbb18aa171775c9eca7e91d3bb453d1a51a3cb4849a09a05b4" kindref="member">interface</ref>.c_str())<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>macTableEntry-&gt;<ref refid="class_mac_table_entry_1aba16ae27a9b129a262790631ecd6149e" kindref="member">getType</ref>()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(query)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;Q&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queryResult<sp/>=<sp/>macTableEntry-&gt;<ref refid="class_mac_table_entry_1a8a2d0356c6109782bdf7b446fa4f6c1c" kindref="member">getQuantumMacAddress</ref>();</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queryResult<sp/>=<sp/>macTableEntry-&gt;<ref refid="class_mac_table_entry_1aaa684cc0b7d88a4758740c26d1027935" kindref="member">getMacAddress</ref>();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queryResult<sp/>=<sp/>macTableEntry-&gt;<ref refid="class_mac_table_entry_1a506d91d4588ee6858a1df8abba79e435" kindref="member">getQuantumInterfaceId</ref>();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>queryResult;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">std::string<sp/>SwitchMemory::searchMacAddressTableByQuantumMacAddress(std::string<sp/>qMacAddress,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>query)</highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>queryResult<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;macAddressTable.size();<sp/>i++)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*macTableEntry<sp/>=<sp/>(<ref refid="class_mac_table_entry" kindref="compound">MacTableEntry</ref><sp/>*)<sp/>this-&gt;macAddressTable[i];</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(macTableEntry-&gt;<ref refid="class_mac_table_entry_1a8a2d0356c6109782bdf7b446fa4f6c1c" kindref="member">getQuantumMacAddress</ref>(),<sp/>qMacAddress.c_str())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(query)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queryResult<sp/>=<sp/>macTableEntry-&gt;<ref refid="class_mac_table_entry_1aaa684cc0b7d88a4758740c26d1027935" kindref="member">getMacAddress</ref>();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queryResult<sp/>=<sp/>macTableEntry-&gt;<ref refid="class_mac_table_entry_1a506d91d4588ee6858a1df8abba79e435" kindref="member">getQuantumInterfaceId</ref>();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>queryResult;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="class_switch_memory_1a16e71b14ea1eb2389636bea2dff8c613" refkind="member"><highlight class="normal"><ref refid="class_quantum_sub_interface_binding" kindref="compound">QuantumSubInterfaceBinding</ref><sp/><ref refid="class_switch_memory_1a16e71b14ea1eb2389636bea2dff8c613" kindref="member">SwitchMemory::getQuantumBindingTable</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_quantum_sub_interface_binding" kindref="compound">QuantumSubInterfaceBinding</ref><sp/>*quantumBindingEntry<sp/>=<sp/>(<ref refid="class_quantum_sub_interface_binding" kindref="compound">QuantumSubInterfaceBinding</ref><sp/>*)<sp/>this-&gt;quantumSubInterfaceBinding[index];</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*quantumBindingEntry;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="class_switch_memory_1af9e8c84c7de5c8302fa177abae3a3f0e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1af9e8c84c7de5c8302fa177abae3a3f0e" kindref="member">SwitchMemory::addQuantumBindingTableEntry</ref>(<ref refid="class_quantum_sub_interface_binding" kindref="compound">QuantumSubInterfaceBinding</ref><sp/>*quantumBindingEntry)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;quantumSubInterfaceBinding.add(quantumBindingEntry);</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="class_switch_memory_1a6b5aa28a001e14642f750d0c40de138d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1a6b5aa28a001e14642f750d0c40de138d" kindref="member">SwitchMemory::getQuantumBindingTableSize</ref>()</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;quantumSubInterfaceBinding.size();</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="class_switch_memory_1a80ee2ab5c4a6a49aa3edd6d42aaa51c6" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_switch_memory_1a80ee2ab5c4a6a49aa3edd6d42aaa51c6" kindref="member">SwitchMemory::getExitInterfaceFromBindingTable</ref>(std::string<sp/>src,<sp/>std::string<sp/>des)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>exitInterface<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;quantumSubInterfaceBinding.size();<sp/>i++)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_quantum_sub_interface_binding" kindref="compound">QuantumSubInterfaceBinding</ref><sp/>*binding<sp/>=<sp/>(<ref refid="class_quantum_sub_interface_binding" kindref="compound">QuantumSubInterfaceBinding</ref><sp/>*)this-&gt;quantumSubInterfaceBinding[i];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strcmp(binding-&gt;<ref refid="class_quantum_sub_interface_binding_1aaba854b90a32d0278d39725bedd5b995" kindref="member">getSourceInterface</ref>(),<sp/>src.c_str())<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>strcmp(binding-&gt;<ref refid="class_quantum_sub_interface_binding_1ad80f36303960043a6953a56b08e98531" kindref="member">getDestinationInterface</ref>(),<sp/>des.c_str())<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exitInterface<sp/>=<sp/>binding-&gt;<ref refid="class_quantum_sub_interface_binding_1ad79f3a4beae4490c67ec3a1ec6ed2481" kindref="member">getSourceSubInterface</ref>();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exitInterface;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="class_switch_memory_1a93ae827e0fc75bdb4c61460e9bc76eeb" refkind="member"><highlight class="normal"><ref refid="class_session_state_entry" kindref="compound">SessionStateEntry</ref><sp/><ref refid="class_switch_memory_1a93ae827e0fc75bdb4c61460e9bc76eeb" kindref="member">SwitchMemory::getsessionStateTableEntry</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_session_state_entry" kindref="compound">SessionStateEntry</ref><sp/>*sessionStateEntry<sp/>=<sp/>(<ref refid="class_session_state_entry" kindref="compound">SessionStateEntry</ref><sp/>*)<sp/>this-&gt;sessionStateTable[index];</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*sessionStateEntry;</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="class_switch_memory_1a3be0998057095110a3476295ab30dfbd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1a3be0998057095110a3476295ab30dfbd" kindref="member">SwitchMemory::addSessionStateTableEntry</ref>(<ref refid="class_session_state_entry" kindref="compound">SessionStateEntry</ref><sp/>*sessionStateEntry)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;sessionStateTable.add(sessionStateEntry);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="class_switch_memory_1aa3600fae1aa1d8aaa0af0d9890385830" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1aa3600fae1aa1d8aaa0af0d9890385830" kindref="member">SwitchMemory::getSessionStateTableSize</ref>()</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;sessionStateTable.size();</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="class_switch_memory_1ad257d83817c301dff411fc0a1ba44841" refkind="member"><highlight class="normal"><ref refid="class_arp_table_entry" kindref="compound">ArpTableEntry</ref><sp/><ref refid="class_switch_memory_1ad257d83817c301dff411fc0a1ba44841" kindref="member">SwitchMemory::getArpTableEntry</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_arp_table_entry" kindref="compound">ArpTableEntry</ref><sp/>*arpTableEntry<sp/>=<sp/>(<ref refid="class_arp_table_entry" kindref="compound">ArpTableEntry</ref><sp/>*)<sp/>this-&gt;arpTable[index];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*arpTableEntry;</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="class_switch_memory_1a304abf12974436aea3a6bcd0fa8ae893" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1a304abf12974436aea3a6bcd0fa8ae893" kindref="member">SwitchMemory::addArpTableEntry</ref>(<ref refid="class_arp_table_entry" kindref="compound">ArpTableEntry</ref><sp/>*arpTableEntry)</highlight></codeline>
<codeline lineno="257"><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;arpTable.add(arpTableEntry);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="class_switch_memory_1a082aae575ddc16f9c8394b630fe5b6f0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_switch_memory_1a082aae575ddc16f9c8394b630fe5b6f0" kindref="member">SwitchMemory::getArpTableSize</ref>()</highlight></codeline>
<codeline lineno="262"><highlight class="normal">{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;arpTable.size();</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="SwitchMemory.cc"/>
  </compounddef>
</doxygen>
