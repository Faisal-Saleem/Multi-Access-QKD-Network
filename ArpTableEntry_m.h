//
// Generated file, do not edit! Created by nedtool 5.4 from ArpTableEntry.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __ARPTABLEENTRY_M_H
#define __ARPTABLEENTRY_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>ArpTableEntry.msg:16</tt> by nedtool.
 * <pre>
 * //
 * // This program is free software: you can redistribute it and/or modify
 * // it under the terms of the GNU Lesser General Public License as published by
 * // the Free Software Foundation, either version 3 of the License, or
 * // (at your option) any later version.
 * // 
 * // This program is distributed in the hope that it will be useful,
 * // but WITHOUT ANY WARRANTY; without even the implied warranty of
 * // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * // GNU Lesser General Public License for more details.
 * // 
 * // You should have received a copy of the GNU Lesser General Public License
 * // along with this program.  If not, see http://www.gnu.org/licenses/.
 * //
 * packet ArpTableEntry
 * {
 *     int identity;
 *     string protocol;
 *     string ipAddress;
 *     string macAddress;
 *     string age;
 *     int type;
 *     string interface;
 * }
 * </pre>
 */
class ArpTableEntry : public ::omnetpp::cPacket
{
  protected:
    int identity;
    ::omnetpp::opp_string protocol;
    ::omnetpp::opp_string ipAddress;
    ::omnetpp::opp_string macAddress;
    ::omnetpp::opp_string age;
    int type;
    ::omnetpp::opp_string interface;

  private:
    void copy(const ArpTableEntry& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ArpTableEntry&);

  public:
    ArpTableEntry(const char *name=nullptr, short kind=0);
    ArpTableEntry(const ArpTableEntry& other);
    virtual ~ArpTableEntry();
    ArpTableEntry& operator=(const ArpTableEntry& other);
    virtual ArpTableEntry *dup() const override {return new ArpTableEntry(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getIdentity() const;
    virtual void setIdentity(int identity);
    virtual const char * getProtocol() const;
    virtual void setProtocol(const char * protocol);
    virtual const char * getIpAddress() const;
    virtual void setIpAddress(const char * ipAddress);
    virtual const char * getMacAddress() const;
    virtual void setMacAddress(const char * macAddress);
    virtual const char * getAge() const;
    virtual void setAge(const char * age);
    virtual int getType() const;
    virtual void setType(int type);
    virtual const char * getInterface() const;
    virtual void setInterface(const char * interface);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ArpTableEntry& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ArpTableEntry& obj) {obj.parsimUnpack(b);}


#endif // ifndef __ARPTABLEENTRY_M_H

